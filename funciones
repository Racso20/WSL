#!/bin/bash


function text2icon(){
        echo -e "\u$1"
}

function extractPorts(){
        ports="$(cat $1 | grep -oP '\d{1,5}/open' | awk '{print $1}' FS='/' | xargs | tr ' ' ',')"
        ip_address="$(cat $1 | grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | sort -u | head -n 1)"
        echo -e "\n[*] Extracting information...\n" > extractPorts.tmp
        echo -e "\t[*] IP Address: $ip_address"  >> extractPorts.tmp
        echo -e "\t[*] Open ports: $ports\n"  >> extractPorts.tmp
        echo $ports | tr -d '\n' | xclip -sel clip
        echo -e "[*] Ports copied to clipboard\n"  >> extractPorts.tmp
        cat extractPorts.tmp; rm extractPorts.tmp
}

function temp(){

        temp=0
        cel=0
        aux=10
        hightemp=$(powershell.exe /c "Get-WMIObject -Query \"SELECT * FROM Win32_PerfFormattedData_Counters_ThermalZoneInformation\" -Namespace \"root/CIMV2\"" | grep HighPrecisionTemperature)
        temp=$(echo $hightemp | tr -d -c 0-9)
        cel=$(((( $temp / 10 ))-((27315/100))))
        echo Temperature : $cel°
}

function wsl(){
        local OPTIND
        local OPTARG
        local option

        local maquina
        local listar

        tipo="HTB"
        usage="WSL [-h ] [-t] -- Ver/Cerrar maquinas en WSL
        donde:
        -h   Muestra el menu de ayuda
        -l   Lista las maquinas en WSL
        -t   Maquina a Terminar"
        listar=0
        salir=1
        while getopts 'hlt:' option; do
                case "$option" in
                        h) echo "$usage"
                        ;;
                        l) listar=1
                        ;;
                        t) maquina=$OPTARG
                        ;;
                        :) printf "missing argument for -%s\n" "$OPTARG" >&2
                        echo "$usage" >&2
                        salir=0
                        ;;
                        \?) printf "illegal option: -%s\n" "$OPTARG" >&2
                        echo "$usage" >&2
                        salir=0
                        ;;
                        *) printf "missing argument for -%s\n" "$OPTARG" >&2
                        echo "$usage" >&2
                        salir=0
                        ;;
                esac
        done
        if [ $salir == 1 ]; then
                if [ $listar == 1 ]; then
                        powershell.exe /c "wsl -l -v"
                elif [ ! -z "$maquina" ]; then
                        powershell.exe /c "wsl -t $maquina"
                else
                        echo "$usage" >&2
                fi
        fi
}

function mkt(){
        local OPTIND
        local OPTARG
        local option
        local tipo
        local usage
        local usuario
        local maquina
        local ip
        local seguir
        local cargar

        tipo="HTB"
        usage="MKT [-h -m -i] [-t] -- Programa para realizar HTB ordenado
        donde:
        -h   Muestra el menu de ayuda
        -m   Nombre de la maquina a realizar
        -i   IP de la maquina a realizar
        -t   Carpeta raiz (default HTB)"
        local usuario=$(whoami)
        while getopts 'm:i:h:t:' option; do
                case "$option" in
                        h) echo "$usage"
                        ;;
                        m) maquina=$OPTARG
                        ;;
                        i) ip=$OPTARG
                        ;;
                        t) tipo=$OPTARG
                        ;;
                        :) printf "missing argument for -%s\n" "$OPTARG" >&2
                        echo "$usage" >&2
                        ;;
                        \?) printf "illegal option: -%s\n" "$OPTARG" >&2
                        echo "$usage" >&2
                        ;;
                        *) printf "missing argument for -%s\n" "$OPTARG" >&2
                        echo "$usage" >&2
                        ;;
                esac
        done

        seguir=1
        if [ -z "$maquina" ]; then
                echo "La maquina no puede ser nula"
                seguir=0
        fi
        if [ -z "$ip" ]; then
                echo "la IP no puede ser nula"
                seguir=0
        fi

        if [ $seguir == 1 ]; then
                ruta="/home/$usuario/Documentos/Maquinas/$tipo/$maquina"
                mkdir -p $ruta/{nmap,contenido,exploits,scripts}
                file='/etc/hosts'
                cargar=1
                while IFS= read -r line
                do
                        if [[ "$line" == *"$ip"* ]]; then
                                cargar=0
                        fi
                done < "$file"

                if [ $cargar == 1 ]; then
                        echo "cargando ip en /etc/hosts"
                        comando="echo $ip       $maquina.htb"
                        $comando | tr '[:upper:]' '[:lower:]' | sudo tee -a /etc/hosts
                fi

                cd $ruta
                echo "Finalizo correctamente"
        else
                echo "$usage" >&2
        fi
}


function exposePort(){

        local OPTIND
        local OPTARG
        local option
        local servicio
        local windows_port
        local linux_port
        local salir


        salir=0
        servicio="get"
        usage="exposePort [-h -w -l] [-s] -- Programa para exponer puertos de Linux en Windows
        donde:
        -h   Muestra el menu de ayuda
        -w   Puerto en Windows
        -l   Puerto en Linux
        -s   {START;STOP}"
        while getopts 'w:l:h:s:' option; do
                case "$option" in
                        h) echo "$usage"
                        ;;
                        w) windows_port=$OPTARG
                        ;;
                        l) linux_port=$OPTARG
                        ;;
                        s) servicio=$OPTARG
                        ;;
                        :) printf "missing argument for -%s\n" "$OPTARG" >&2
                        echo "$usage" >&2
                        ;;
                        \?) printf "illegal option: -%s\n" "$OPTARG" >&2
                        echo "$usage" >&2
                        ;;
                        *) printf "missing argument for -%s\n" "$OPTARG" >&2
                        echo "$usage" >&2
                        ;;
                esac
        done

        ip=$(ip -a addr show eth0 | grep "scope global" | grep -Po '(?<=inet )[\d.]+')
        if [ ${servicio^^} == "START" ]; then
                if ! [[ "$windows_port" =~ ^[0-9]+$ ]]; then
                        echo "El puerto ingresado para Windows $windows_port no es numerico"
                elif ! [[ "$linux_port" =~ ^[0-9]+$ ]]; then
                        echo "El puerto ingresado para Linux $linux_port no es numerico"
                else
                        powershell /C "netsh interface portproxy add v4tov4 listenport=$windows_port listenaddress=0.0.0.0 connectport=$linux_port connectaddress=$ip" &>/dev/null
                        powershell /C "New-NetFirewallRule -DisplayName 'Redirect $windows_port to Kali' -Profile 'Private,Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort $windows_port" &>/dev/null
                        echo "El puerto $windows_port esta apuntando a $linux_port en WSL"
                fi

        elif [ ${servicio^^} == "STOP" ]; then
                if ! [[ "$windows_port" =~ ^[0-9]+$ ]]; then
                        echo "El puerto ingresado para Windows $windows_port no es numerico"
                else
                        powershell /c "Remove-NetFirewallRule -DisplayName 'Redirect $windows_port to Kali'" &>/dev/null
                        powershell /c "netsh interface portproxy del v4tov4 listenport=$windows_port listenaddress=0.0.0.0" &>/dev/null
                        echo "Se cerró el puerto $windows_port"
                fi
        else
                powershell /c "netsh interface portproxy show v4tov4" 2>/dev/null
        fi
}

function winfirewall(){

    local OPTIND
    local OPTARG
    local option
    local salir

    servicio="SHOW"  # Valor por defecto
    salir=0
    usage="winfirewall [-h] [-s [OPTION]] -- Programa para exponer puertos de Linux en Windows
    donde:
    -h   Muestra el menu de ayuda
    -s   Status {ON;OFF}"

    while getopts 'hs::' option; do
        case "$option" in
            h)
                echo "AYUDA"
                echo "$usage"
                salir=1
                ;;
            s) servicio=$OPTARG  # Asigna ON o OFF si está presente
               salir=0
               ;;
            \?)
                echo "Opción no válida: -$OPTARG"
                echo "$usage"
                salir=1
                ;;
        esac
    done

    # Lógica para ejecutar el comando solo si no hubo error
    if [ $salir == 0 ]; then
        echo "$servicio"  # Muestra el valor de servicio
        if [ "${servicio^^}" == "ON" ]; then
            powershell /c "netsh advfirewall set allprofiles state on" 2>/dev/null
        elif [ "${servicio^^}" == "OFF" ]; then
            powershell /c "netsh advfirewall set allprofiles state off" 2>/dev/null
        else
            powershell /c "netsh advfirewall show allprofiles state" 2>/dev/null
        fi
    fi
}
